{"version":3,"sources":["utils/image.js","components/imageLoader/index.js","components/imagePanel/index.js","App.js","serviceWorker.js","index.js"],"names":["getImageData","base64Image","Promise","resolve","reject","img","Image","onload","canvas","document","createElement","ctx","getContext","width","height","drawImage","src","e","loadImage","file","FileReader","reader","result","readAsDataURL","ImageLoader","onImageChange","_callee","event","updateState","image","imageData","regenerator_default","a","wrap","_context","prev","next","_this","props","target","files","sent","base64","stop","this","react_default","type","accept","onChange","PureComponent","ImagePanel","alt","style","App","state","newState","setState","className","imageLoader_ImageLoader","imagePanel_ImagePanel","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RAAaA,EAAe,SAAAC,GAC3B,OAAO,IAAIC,QAAQ,SAACC,EAASC,GAC5B,IACC,IAAMC,EAAM,IAAIC,MAEhBD,EAAIE,OAAS,WACZ,IAAMC,EAASC,SAASC,cAAc,UAChCC,EAAMH,EAAOI,WAAW,MAE9BJ,EAAOK,MAAQR,EAAIQ,MACnBL,EAAOM,OAAST,EAAIS,OAEpBH,EAAII,UAAUV,EAAK,EAAG,GAEtBF,EAAQQ,EAAIX,aAAa,EAAG,EAAGQ,EAAOK,MAAOL,EAAOM,UAGrDT,EAAIW,IAAMf,EACT,MAAOgB,GACRb,EAAOa,OAKGC,EAAY,SAAAC,GACxB,GAAKC,YAAeD,EAIpB,OAAO,IAAIjB,QAAQ,SAACC,EAASC,GAC5B,IACC,IAAMiB,EAAS,IAAID,WAEnBC,EAAOd,OAAS,WACfJ,EAAQkB,EAAOC,SAGhBD,EAAOE,cAAcJ,GACpB,MAAOF,GACRb,EAAOa,OClCWO,6MASpBC,oDAAgB,SAAAC,EAAMC,GAAN,IAAAC,EAAAT,EAAAU,EAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACRR,EAAeS,EAAKC,MAApBV,YACDT,EAAOQ,EAAMY,OAAOC,OAASb,EAAMY,OAAOC,MAAM,GAFvCN,EAAAE,KAAA,EAGKlB,EAAUC,GAHf,cAGTU,EAHSK,EAAAO,KAAAP,EAAAE,KAAA,EAISpC,EAAa6B,GAJtB,OAITC,EAJSI,EAAAO,KAMfb,EAAY,CACXc,OAAQb,EACRC,UAAWA,IARG,wBAAAI,EAAAS,SAAAjB,EAAAkB,uIAPf,OAAOC,EAAAb,EAAAtB,cAAA,SACNoC,KAAK,OACLC,OANe,wBAOfC,SAAUJ,KAAKnB,uBALuBwB,iBCApBC,mLACX,IACDlC,EAAO4B,KAAKN,MAAZtB,IAEP,OAAO6B,EAAAb,EAAAtB,cAAA,WACNmC,EAAAb,EAAAtB,cAAA,OACCM,IAAKA,EACLmC,IAAI,GACJC,MAAO,CACNtC,OAZc,QAadD,MAZa,kBAEsBoC,iBC0BzBI,6MAzBdC,MAAQ,CACPZ,OAAQ,QACRZ,UAAW,MAkBZF,YAAc,SAAC2B,GACdlB,EAAKmB,SAASD,4EAhBN,IACDb,EAAUE,KAAKU,MAAfZ,OAEP,OACCG,EAAAb,EAAAtB,cAAA,OAAK+C,UAAU,OACdZ,EAAAb,EAAAtB,cAACgD,EAAD,CACC9B,YAAagB,KAAKhB,cAEnBiB,EAAAb,EAAAtB,cAACiD,EAAD,CACC3C,IAAK0B,YAfQkB,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAb,EAAAtB,cAAC0D,EAAD,MAAS3D,SAAS4D,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.835d6387.chunk.js","sourcesContent":["export const getImageData = base64Image => {\n\treturn new Promise((resolve, reject) => {\n\t\ttry {\n\t\t\tconst img = new Image();\n\n\t\t\timg.onload = () => {\n\t\t\t\tconst canvas = document.createElement('canvas');\n\t\t\t\tconst ctx = canvas.getContext('2d');\n\n\t\t\t\tcanvas.width = img.width;\n\t\t\t\tcanvas.height = img.height;\n\n\t\t\t\tctx.drawImage(img, 0, 0);\n\n\t\t\t\tresolve(ctx.getImageData(0, 0, canvas.width, canvas.height));\n\t\t\t};\n\n\t\t\timg.src = base64Image;\n\t\t} catch (e) {\n\t\t\treject(e);\n\t\t}\n\t});\n};\n\nexport const loadImage = file => {\n\tif (!FileReader || !file) {\n\t\treturn;\n\t}\n\n\treturn new Promise((resolve, reject) => {\n\t\ttry {\n\t\t\tconst reader = new FileReader();\n\n\t\t\treader.onload = () => {\n\t\t\t\tresolve(reader.result);\n\t\t\t};\n\n\t\t\treader.readAsDataURL(file);\n\t\t} catch (e) {\n\t\t\treject(e);\n\t\t}\n\n\t});\n};\n","import React, {PureComponent} from 'react';\nimport {getImageData, loadImage} from '../../utils/image';\n\nconst IMG_TYPES = 'image/png, image/jpeg';\n\nexport default class ImageLoader extends PureComponent {\n\trender() {\n\t\treturn <input\n\t\t\ttype='file'\n\t\t\taccept={IMG_TYPES}\n\t\t\tonChange={this.onImageChange}\n\t\t/>;\n\t}\n\n\tonImageChange = async event => {\n\t\tconst {updateState} = this.props;\n\t\tconst file = event.target.files && event.target.files[0];\n\t\tconst image = await loadImage(file);\n\t\tconst imageData = await getImageData(image);\n\n\t\tupdateState({\n\t\t\tbase64: image,\n\t\t\timageData: imageData,\n\t\t});\n\t};\n}\n","import React, {PureComponent} from 'react';\n\nconst IMG_HEIGHT = '250px';\nconst IMG_WIDTH = 'auto';\n\nexport default class ImagePanel extends PureComponent {\n\trender() {\n\t\tconst {src} = this.props;\n\n\t\treturn <div>\n\t\t\t<img\n\t\t\t\tsrc={src}\n\t\t\t\talt=''\n\t\t\t\tstyle={{\n\t\t\t\t\theight: IMG_HEIGHT,\n\t\t\t\t\twidth: IMG_WIDTH,\n\t\t\t\t}}\n\t\t\t/>\n\t\t</div>;\n\t}\n}\n","import React, {Component} from 'react';\nimport './App.css';\nimport ImageLoader from './components/imageLoader';\nimport ImagePanel from './components/imagePanel';\n\nclass App extends Component {\n\tstate = {\n\t\tbase64: 'image',\n\t\timageData: [],\n\t};\n\n\trender() {\n\t\tconst {base64} = this.state;\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<ImageLoader\n\t\t\t\t\tupdateState={this.updateState}\n\t\t\t\t/>\n\t\t\t\t<ImagePanel\n\t\t\t\t\tsrc={base64}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tupdateState = (newState) => {\n\t\tthis.setState(newState);\n\t};\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}